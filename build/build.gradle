buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

//add dependency repositories
repositories {
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven"
	}
    flatDir {
        dirs 'libs'
    }
}

group = "codechicken" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "NotEnoughItems"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile name: "CodeChickenLib-${config.mc_version}-${config.ccl_version}-dev"
    compile name: "CodeChickenCore-${config.mc_version}-${config.ccc_version}-dev"
}

version =  "${project.config.mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")

println  config.mc_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = config.mc_version + "-" + config.forge_version
    mappings = "snapshot_nodoc_20151206"
    runDir = "run"
}

def root = project.projectDir.parentFile
sourceSets {
    main {
        java {
            srcDir new File(root, "src")
        }
        resources {
            srcDir new File(root, "resources")
        }
    }
}

processResources {
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc_version", config.mc_version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'version':project.version,'mc_version':config.mc_version
    }

    // Move access transformer to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

version = "${project.minecraft.version}-${project.version}"
def commonManifest = {
    attributes 'FMLCorePlugin': 'codechicken.nei.asm.NEICorePlugin'
    attributes 'FMLAT': 'nei_at.cfg'
}

jar {
    classifier = 'universal'
    manifest commonManifest
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
    archives devJar
}

// Configure an upload task.
uploadArchives {
    dependsOn 'reobf'
	if (project.hasProperty("local_maven")) {
		repositories {
			logger.info('Publishing to local maven repo')

			mavenDeployer {
				repository(url: "file://${local_maven}")
			}
		}
	}
}